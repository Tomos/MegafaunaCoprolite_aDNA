subset_sample_id <- unique(subset_df$sample_id)
for(i in 1:length(subset_sample_id)){
#i <- 1
# Iterate through the relevant rows from the sample_table:
sample_of_interest <- subset_sample_id[i]
# Take subset of the subset_df that only correspond to a single sample ID:
subset_ind <- subset_df %>%
filter(sample_id == sample_of_interest)
#print(paste0("------",i, ": ", sample_of_interest))
for(j in 1:length(subset_ind[,1])){
#j <- 1
subset_ind_name <- subset_ind$Scientific_Name[j]
#print(paste0("---- ", subset_ind_name))
# Adjust the taxa names so they are consistent with the beta_div_count df above:
subset_ind_name <- stri_replace_all_fixed(subset_ind_name, pattern = c("-", ".", " "), replacement = c("", "", ""), vectorize_all = FALSE)
#subset_ind_name <- gsub(c("-", ".", " "), "", subset_ind_name)
#print(paste0("---", subset_ind_name))
#print(length(beta_div_count[1,]))
beta_div_count[sample_of_interest, subset_ind_name] <- as.numeric(subset_ind$USH[j])
}
}
# Removes all non-bacterial phyla that have been added to the beta_div_count df, e.g. eucharyotes, etc.:
beta_div_count <- beta_div_count[, (names(beta_div_count) %in% c(bacterial_taxon_df$childtaxa_name))]
# Finds the proportion of USH assigned to each bacterial taxon across each sample row:
beta_div_prop <- sweep(beta_div_count, 1, rowSums(beta_div_count), '/')
### Metadata with the same rownames as the beta_div_prop/beta_div_count df above:
metadata <- data.frame(matrix(NA, nrow = length(unique(sample_table$sample_id)), ncol = 6, dimnames = list(c(unique(sample_table$sample_id)), c("host_sp", "age", "pch", "day", "shaded", "order"))))
host_list <- sample_table %>%
distinct(sample_id, host_sp, .keep_all = FALSE)
for(i in 1:length(host_list[,1])){
#i <- 1
#print(host_list[i,2])
metadata[host_list[i,2], 1] <- host_list[i,1]
#print(metadata[host_list[i,2], 1])
if(metadata[host_list[i,2], 1] == "Mammuthus \ncolumbi" | metadata[host_list[i,2], 1] == "Nothrotheriops \nshastensis" | metadata[host_list[i,2], 1] == "Bison \nsp. (paleo)"){
metadata[host_list[i,2], 2] <- "past"
metadata[host_list[i,2], 3] <- 17
metadata$day[i] <- NA # Number of days in 15K years; arbritrary number
metadata$shaded[i] <- "S"
}else{
metadata[host_list[i,2], 2] <- "present"
metadata[host_list[i,2], 3] <- 16
metadata$day[i] <- 0
metadata$shaded[i] <- "U"
}
if(metadata[host_list[i,2], 1] == "Mammuthus \ncolumbi" | metadata[host_list[i,2], 1] == "Loxodonta \nafricana"){
metadata$order[i] <- "Probiscidea"
}else if(metadata[host_list[i,2], 1] == "Nothrotheriops \nshastensis" | metadata[host_list[i,2], 1] == "Bradypus \nvariegatus"){
metadata$order[i] <- "Pilosa"
}else{
metadata$order[i] <- "Artiodactyla"
}
}
# Adding color column to the metadata; each color signifies a different host species:
n_col_df <- metadata %>%
group_by(host_sp) %>%
summarise(n = n())
n_col_df <- as.data.frame(n_col_df)
n_col <- length(n_col_df[,1])
col_vector2 <- distinctColorPalette(k = n_col, altCol = FALSE, runTsne = FALSE)
n_col_df$color_col <- col_vector2
for(i in 1:length(metadata[,1])){
for(j in 1:length(n_col_df[,1])){
if(metadata$host_sp[i] == n_col_df$host_sp[j]){
metadata$col_host[i] <- n_col_df$color_col[j]
}else{
}
}
}
# Adding color column to the metadata; each color signifies a different age:
n_col_df <- metadata %>%
group_by(age) %>%
summarise(n = n())
n_col_df <- as.data.frame(n_col_df)
n_col <- length(n_col_df[,1])
col_vector2 <- distinctColorPalette(k = n_col, altCol = FALSE, runTsne = FALSE)
n_col_df$color_col <- col_vector2
for(i in 1:length(metadata[,1])){
for(j in 1:length(n_col_df[,1])){
if(metadata$age[i] == n_col_df$age[j]){
metadata$col_age[i] <- n_col_df$color_col[j]
}else{
}
}
}
# Removes all columns of zeros:
#beta_div_prop <- beta_div_prop[, colSums(beta_div_prop != 0) > 0]
braycurtis_prop <- vegdist(beta_div_prop, method = "bray")
braycurtis_prop_sqrt <- vegdist(beta_div_prop^0.25, method = "bray")
# Select the taxonomic level of interest:
path_filename <- paste0(base_dir, "data/Bacterial_taxa/bacterial_", taxon_level_of_interest, ".rds")
# Load all levels of the taxon of interest under the kindgom of bacteria (downloaded above):
bacterial_taxon <- readRDS(path_filename)
# Create dataframe of the results:
bacterial_taxon_df <- as.data.frame(bacterial_taxon)
### Remove spaces, hyphens and full stops from the taxonomic names:
bacterial_taxon_df$childtaxa_name <- stri_replace_all_fixed(bacterial_taxon_df$childtaxa_name, pattern = c("-", ".", " "), replacement = c("", "", ""), vectorize_all = FALSE)
# Creae list of all bacterial taxa at the level of interest:
bacterial_taxa <- unique(bacterial_taxon_df$childtaxa_name)
# Create empty matrix which will count the number of USHs for each taxon (at the level of interest)
beta_div_count <- data.frame(matrix(0, nrow = length(unique(sample_table$sample_id)), ncol = length(unique(bacterial_taxon_df$childtaxa_name))))
colnames(beta_div_count) <- c(unique(bacterial_taxon_df$childtaxa_name))
rownames(beta_div_count) <- c(unique(sample_table$sample_id))
# Take a subset of the sample_table corresponding to the taxonomic level of interest:
subset_df <- sample_table %>%
filter(cargo_taxon == taxon_level_of_interest)
# List of all relevant taxa from the sample_table:
subset_sample_id <- unique(subset_df$sample_id)
for(i in 1:length(subset_sample_id)){
#i <- 1
# Iterate through the relevant rows from the sample_table:
sample_of_interest <- subset_sample_id[i]
# Take subset of the subset_df that only correspond to a single sample ID:
subset_ind <- subset_df %>%
filter(sample_id == sample_of_interest)
#print(paste0("------",i, ": ", sample_of_interest))
for(j in 1:length(subset_ind[,1])){
#j <- 1
subset_ind_name <- subset_ind$Scientific_Name[j]
#print(paste0("---- ", subset_ind_name))
# Adjust the taxa names so they are consistent with the beta_div_count df above:
subset_ind_name <- stri_replace_all_fixed(subset_ind_name, pattern = c("-", ".", " "), replacement = c("", "", ""), vectorize_all = FALSE)
#subset_ind_name <- gsub(c("-", ".", " "), "", subset_ind_name)
#print(paste0("---", subset_ind_name))
#print(length(beta_div_count[1,]))
beta_div_count[sample_of_interest, subset_ind_name] <- as.numeric(subset_ind$USH[j])
}
}
# Removes all non-bacterial phyla that have been added to the beta_div_count df, e.g. eucharyotes, etc.:
beta_div_count <- beta_div_count[, (names(beta_div_count) %in% c(bacterial_taxon_df$childtaxa_name))]
# Finds the proportion of USH assigned to each bacterial taxon across each sample row:
beta_div_prop <- sweep(beta_div_count, 1, rowSums(beta_div_count), '/')
### Metadata with the same rownames as the beta_div_prop/beta_div_count df above:
metadata <- data.frame(matrix(NA, nrow = length(unique(sample_table$sample_id)), ncol = 6, dimnames = list(c(unique(sample_table$sample_id)), c("host_sp", "age", "pch", "day", "shaded", "order"))))
host_list <- sample_table %>%
distinct(sample_id, host_sp, .keep_all = FALSE)
for(i in 1:length(host_list[,1])){
#i <- 1
#print(host_list[i,2])
metadata[host_list[i,2], 1] <- host_list[i,1]
#print(metadata[host_list[i,2], 1])
if(metadata[host_list[i,2], 1] == "Mammuthus \ncolumbi" | metadata[host_list[i,2], 1] == "Nothrotheriops \nshastensis" | metadata[host_list[i,2], 1] == "Bison \nsp. (paleo)"){
metadata[host_list[i,2], 2] <- "past"
metadata[host_list[i,2], 3] <- 17
metadata$day[i] <- NA # Number of days in 15K years; arbritrary number
metadata$shaded[i] <- "S"
}else{
metadata[host_list[i,2], 2] <- "present"
metadata[host_list[i,2], 3] <- 16
metadata$day[i] <- 0
metadata$shaded[i] <- "U"
}
if(metadata[host_list[i,2], 1] == "Mammuthus \ncolumbi" | metadata[host_list[i,2], 1] == "Loxodonta \nafricana"){
metadata$order[i] <- "Probiscidea"
}else if(metadata[host_list[i,2], 1] == "Nothrotheriops \nshastensis" | metadata[host_list[i,2], 1] == "Bradypus \nvariegatus"){
metadata$order[i] <- "Pilosa"
}else{
metadata$order[i] <- "Artiodactyla"
}
}
# Adding color column to the metadata; each color signifies a different host species:
n_col_df <- metadata %>%
group_by(host_sp) %>%
summarise(n = n())
n_col_df <- as.data.frame(n_col_df)
n_col <- length(n_col_df[,1])
col_vector2 <- distinctColorPalette(k = n_col, altCol = FALSE, runTsne = FALSE)
n_col_df$color_col <- col_vector2
for(i in 1:length(metadata[,1])){
for(j in 1:length(n_col_df[,1])){
if(metadata$host_sp[i] == n_col_df$host_sp[j]){
metadata$col_host[i] <- n_col_df$color_col[j]
}else{
}
}
}
# Adding color column to the metadata; each color signifies a different age:
n_col_df <- metadata %>%
group_by(age) %>%
summarise(n = n())
n_col_df <- as.data.frame(n_col_df)
n_col <- length(n_col_df[,1])
col_vector2 <- distinctColorPalette(k = n_col, altCol = FALSE, runTsne = FALSE)
n_col_df$color_col <- col_vector2
for(i in 1:length(metadata[,1])){
for(j in 1:length(n_col_df[,1])){
if(metadata$age[i] == n_col_df$age[j]){
metadata$col_age[i] <- n_col_df$color_col[j]
}else{
}
}
}
# Removes all columns of zeros:
#beta_div_prop <- beta_div_prop[, colSums(beta_div_prop != 0) > 0]
braycurtis_prop <- vegdist(beta_div_prop, method = "bray")
braycurtis_prop_sqrt <- vegdist(beta_div_prop^0.25, method = "bray")
# Nonmetric multidimensional scaling:
NMDS_braycurtis_prop_k1 <- metaMDS(braycurtis_prop, k = 1, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k1_sqrt <- metaMDS(braycurtis_prop_sqrt, k = 1, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k2 <- metaMDS(braycurtis_prop, k = 2, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k2_sqrt <- metaMDS(braycurtis_prop_sqrt, k = 2, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k3 <- metaMDS(braycurtis_prop, k = 3, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k3_sqrt <- metaMDS(braycurtis_prop_sqrt, k = 3, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k4 <- metaMDS(braycurtis_prop, k = 4, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k4_sqrt <- metaMDS(braycurtis_prop_sqrt, k = 4, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k5 <- metaMDS(braycurtis_prop, k = 5, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k5_sqrt <- metaMDS(braycurtis_prop_sqrt, k = 5, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k6 <- metaMDS(braycurtis_prop, k = 6, try = 50, trymax = 50, autotransform = F)
NMDS_braycurtis_prop_k6_sqrt <- metaMDS(braycurtis_prop_sqrt, k = 6, try = 50, trymax = 50, autotransform = F)
stress_points <- as.vector(c(NMDS_braycurtis_prop_k1$stress,
NMDS_braycurtis_prop_k2$stress, NMDS_braycurtis_prop_k3$stress, NMDS_braycurtis_prop_k4$stress, NMDS_braycurtis_prop_k5$stress, NMDS_braycurtis_prop_k6$stress))
stress_points_sqrt <- as.vector(c(NMDS_braycurtis_prop_k1_sqrt$stress,
NMDS_braycurtis_prop_k2_sqrt$stress, NMDS_braycurtis_prop_k3_sqrt$stress, NMDS_braycurtis_prop_k4_sqrt$stress, NMDS_braycurtis_prop_k5_sqrt$stress, NMDS_braycurtis_prop_k6_sqrt$stress))
# Establishing how many ordination dimensions to use (regular beta diversity matrix):
{
par(cex = 1.5, las = 1)
plot_vec <- as.vector(sapply(1:length(stress_points), function(x) rep(x, 1), simplify = "vector"))
plot(plot_vec, stress_points, ylab = "Stress", xlab = "Ordination dimensions")
lines(1:(length(stress_points)), as.vector((by(stress_points, plot_vec, mean))))
abline(a = 0.10, b = 0, col = "orange")
abline(h = 0.20, col = "red")
abline(h = 0.05, col = "green")
}
# Establishing how many ordination dimensions to use (with the square-rooted beta diversity matrix):
{
par(cex = 1.5, las = 1)
plot_vec <- as.vector(sapply(1:length(stress_points_sqrt), function(x) rep(x, 1), simplify = "vector"))
plot(plot_vec, stress_points_sqrt, ylab = "Stress", xlab = "Ordination dimensions")
lines(1:(length(stress_points_sqrt)), as.vector((by(stress_points_sqrt, plot_vec, mean))))
abline(a = 0.10, b = 0, col = "orange")
abline(h = 0.20, col = "red")
abline(h = 0.05, col = "green")
}
# Correlation between multidimensional distance and ordination distance:
stressplot(NMDS_braycurtis_prop_k1)
stressplot(NMDS_braycurtis_prop_k2)
stressplot(NMDS_braycurtis_prop_k3)
stressplot(NMDS_braycurtis_prop_k4)
stressplot(NMDS_braycurtis_prop_k5)
stressplot(NMDS_braycurtis_prop_k6)
#ordiplot(NMDS_braycurtis_prop_k2)
# Separating out the NMDS points
NMDS_braycurtis_prop_k2_points <- NMDS_braycurtis_prop_k2$points
NMDS_braycurtis_prop_k2_sqrt_points <- NMDS_braycurtis_prop_k2_sqrt$points
# ggplot:
############
# Bray-curtis metrics not transformed
data.scores <- as.data.frame(scores(NMDS_braycurtis_prop_k2_points))
data.scores <- as.data.frame(cbind(data.scores, rownames(data.scores)))
names(data.scores)[names(data.scores) == 'rownames(data.scores)'] <- 'sample'
data.scores$host <- c(rep('Columbian mammoth',3),
rep('African savannah elephant', 2),
rep('Ground sloth', 4),
rep('Bison (paleontological)', 3),
rep('Bison (modern)', 5),
rep('African savannah elephant', 4),
rep('Brown-throated sloth', 2))
data.scores$age <- c(rep('Paleontological',3),
rep('Modern', 2),
rep('Paleontological', 4),
rep('Paleontological', 3),
rep('Modern', 5),
rep('Modern', 4),
rep('Modern', 2))
ch1 <- data.scores %>%
group_by(host) %>%
slice(chull(MDS1, MDS2))
ch2 <- data.scores %>%
filter(age == "Modern") %>%
group_by(age) %>%
slice(chull(MDS1, MDS2))
ch3 <- data.scores %>%
filter(age == "Paleontological") %>%
group_by(age) %>%
slice(chull(MDS1, MDS2))
NMDS_k2_plot_host <- ggplot() +
theme_classic() +
geom_point(data=data.scores,aes(x=MDS1, y=MDS2, colour=host), size=3) +
scale_color_manual(name = "Host species:",
values = c('Columbian mammoth' = 'skyblue',
'African savannah elephant' = 'dodgerblue4',
'Ground sloth' = 'darkolivegreen2',
'Bison (paleontological)' = 'tan',
'Bison (modern)' = 'tan4',
'Brown-throated sloth' = 'darkolivegreen')) +
geom_polygon(data = ch1, aes(x = MDS1, y = MDS2, group = host, col = c(host)), size = 1, alpha = 0) +
coord_equal() +
geom_polygon(data = ch2, aes(x = MDS1, y = MDS2, group = age), fill = c("skyblue"), size = 1, alpha = 0.2) +
coord_equal() +
geom_polygon(data = ch3, aes(x = MDS1, y = MDS2, group = age), fill = c("red"), size = 1, alpha = 0.1) +
coord_equal() +
annotate("text", x = (max(data.scores$MDS1) - (max(data.scores$MDS1)/6)),
y = (max(data.scores$MDS2) + (max(data.scores$MDS2)/4)),
label = "Modern",
size = 5) +
annotate("text", x = (min(data.scores$MDS1) + (max(data.scores$MDS1)/2)),
y = (max(data.scores$MDS2) + (max(data.scores$MDS2)/4)),
label = "Paleontological",
size = 5) +
ggtitle(paste0(str_to_title( taxon_level_of_interest), ":")) +
theme(plot.title = element_text(size = 20, face = "bold")) +
theme(axis.text=element_text(size=12))
leg <- cowplot::get_legend(NMDS_k2_plot_host)
leg <- ggplotify::as.ggplot(leg)
print(leg)
ggsave(paste0(base_dir,"figures/",taxon_level_of_interest,"_NMDS_host_age_legend.png"), width = 10, height = 5, units = 'in')
NMDS_k2_plot_host <- NMDS_k2_plot_host + theme(legend.position = "none")
print(NMDS_k2_plot_host)
ggsave(paste0(base_dir,"figures/",taxon_level_of_interest,"_NMDS_host_age.png"), width = 10, height = 5, units = 'in')
# Bray-curtis metrics to the power 0.25:
data.scores <- as.data.frame(scores(NMDS_braycurtis_prop_k2_sqrt_points))
data.scores <- as.data.frame(cbind(data.scores, rownames(data.scores)))
names(data.scores)[names(data.scores) == 'rownames(data.scores)'] <- 'sample'
data.scores$host <- c(rep('Columbian mammoth',3),
rep('African savannah elephant', 2),
rep('Ground sloth', 4),
rep('Bison (paleontological)', 3),
rep('Bison (modern)', 5),
rep('African savannah elephant', 4),
rep('Brown-throated sloth', 2))
data.scores$age <- c(rep('Paleontological',3),
rep('Modern', 2),
rep('Paleontological', 4),
rep('Paleontological', 3),
rep('Modern', 5),
rep('Modern', 4),
rep('Modern', 2))
ch1 <- data.scores %>%
group_by(host) %>%
slice(chull(MDS1, MDS2))
ch2 <- data.scores %>%
filter(age == "Modern") %>%
group_by(age) %>%
slice(chull(MDS1, MDS2))
ch3 <- data.scores %>%
filter(age == "Paleontological") %>%
group_by(age) %>%
slice(chull(MDS1, MDS2))
NMDS_k2_plot_host <- ggplot() +
theme_classic() +
geom_polygon(data = ch1, aes(x = MDS1, y = MDS2, group = host, col = c(host)), size = 1, alpha = 0) +
coord_equal() +
geom_polygon(data = ch2, aes(x = MDS1, y = MDS2, group = age), fill = c("skyblue"), size = 1, alpha = 0.2) +
coord_equal() +
geom_polygon(data = ch3, aes(x = MDS1, y = MDS2, group = age), fill = c("red"), size = 1, alpha = 0.1) +
coord_equal() +
geom_point(data=data.scores,aes(x=MDS1, y=MDS2, colour=host), size=3) +
scale_color_manual(name = "Individual host species:",
values = c('Columbian mammoth' = 'skyblue',
'African savannah elephant' = 'dodgerblue4',
'Ground sloth' = 'darkolivegreen2',
'Bison (paleontological)' = 'tan',
'Bison (modern)' = 'tan4',
'Brown-throated sloth' = 'darkolivegreen')) +
annotate("text", x = (max(data.scores$MDS1) - (max(data.scores$MDS1)/6)),
y = (max(data.scores$MDS2) + (max(data.scores$MDS2)/4)),
label = "Modern",
size = 5) +
annotate("text", x = (min(data.scores$MDS1) + (max(data.scores$MDS1)/2)),
y = (max(data.scores$MDS2) + (max(data.scores$MDS2)/4)),
label = "Paleontological",
size = 5) +
xlab("NMDS1") + ylab("NMDS2") +
ggtitle(paste0(str_to_title( taxon_level_of_interest), ":")) +
theme(plot.title = element_text(size = 20, face = "bold")) +
theme(axis.text=element_text(size=12))
leg <- cowplot::get_legend(NMDS_k2_plot_host)
leg <- ggplotify::as.ggplot(leg)
print(leg)
#ggsave(paste0(base_dir,"figures/",taxon_level_of_interest,"_sqrt_NMDS_host_age_legend.png"), width = 10, height = 5, units = 'in')
NMDS_k2_plot_host <- NMDS_k2_plot_host + theme(legend.position = "none")
print(NMDS_k2_plot_host)
#ggsave(paste0(base_dir,"figures/",taxon_level_of_interest,"_sqrt_NMDS_host_age.png"), width = 10, height = 5, units = 'in')
# Dispersion test based on host species (an assumption of using PERMANOVA):
bd <- vegan::betadisper(braycurtis_prop, as.factor(metadata$host_sp))
boxplot(bd)
permutest(bd)
# Dispersion test based on sample age (an assumption of using PERMANOVA):
bd <- betadisper(braycurtis_prop, metadata$age)
boxplot(bd)
permutest(bd)
# PERMANOVA by host species nested within order, as well as whether the age (modern vs paleontological):
pmv <- adonis(formula = braycurtis_prop ~ metadata$age + metadata$order / metadata$host_sp, strata = metadata$order, data = metadata, permutations = 9999, method = 'bray')
pmv
pmv_df <- as.data.frame(pmv$aov.tab)
write.csv(pmv_df, paste0(base_dir, "figures/PrysJonesSamples_permanova_", taxon_level_of_interest, ".csv"))
# Plot of permutations:
densityplot(permustats(pmv))
# pairwise PERMANOVA:
pairwise.perm.manova(braycurtis_prop, metadata$host_sp, p.method="holm")
# Which bacterial taxa are responsible for the bray-curtis distances between samples based on host species:
sim1 <- vegan::simper(beta_div_prop, group = metadata$age)
sim1
# Which bacterial taxa are responsible for the bray-curtis distances between samples based on age:
sim2 <- vegan::simper(beta_div_prop, group = metadata$host_sp)
sim2
wong_dir <- paste0(base_dir, "data/", desiccation_wong)
wong_files <- list.files(path = wong_dir, pattern = "txt$")
n_file <- length(wong_files)
wong_taxa <- data.frame(Farm = character(),
ManureID = character(),
Days = character(),
Taxon = character(),
Prop = numeric(),
Taxon_level <- character())
for(f in 1:n_file){
#f <- 1
test_file_name <- wong_files[f]
test_file_info <- str_split(test_file_name, "\\_", n = Inf, simplify = TRUE)
taxon_lev <- gsub("\\..*", "",test_file_info[3])
test_file <- read.csv(file = paste0(base_dir, "data/", desiccation_wong, test_file_name), sep = '\t', header = TRUE)
test_file <- as.data.frame(test_file)
for(i in 2:ncol(test_file)){
#i <- 3
sample_id <- as.character(colnames(test_file[i]))
sample_info <- str_split(sample_id, "\\.", n = Inf, simplify = TRUE)
subset <- test_file %>%
dplyr::select(Taxon, sample_id)
farm <- rep(sample_info[1], length(subset[,1]))
manureid <- rep(sample_info[2], length(subset[,1]))
day <- rep(sample_info[3], length(subset[,1]))
tax_lev <- rep(taxon_lev, length(subset[,1]))
subset <- cbind(farm, manureid, day, subset, tax_lev)
colnames(subset) <- c("Farm", "ManureID", "Day", "Taxon", "Prop", "Taxonomic_level")
wong_taxa <- rbind(wong_taxa, subset)
}
}
wong_taxa$Taxonomic_level[wong_taxa$Taxonomic_level == 'L2'] <- 'phylum'
wong_taxa$Taxonomic_level[wong_taxa$Taxonomic_level == 'L3'] <- 'class'
wong_taxa$Taxonomic_level[wong_taxa$Taxonomic_level == 'L4'] <- 'order'
wong_taxa$Taxonomic_level[wong_taxa$Taxonomic_level == 'L5'] <- 'family'
wong_taxa$Taxonomic_level[wong_taxa$Taxonomic_level == 'L6'] <- 'genus'
taxa_level_n <- wong_taxa %>%
group_by(Taxonomic_level) %>%
summarise(n = n())
set.seed(9)
wong_subset <- wong_taxa %>%
filter(wong_taxa$Taxonomic_level == taxon_level_of_interest)
sample_check <- wong_subset %>%
group_by(ManureID, Day) %>%
summarise(total_prop = sum(wong_subset$Prop))
sample_check$Day <- as.numeric(sample_check$Day)
sample_check <- arrange(sample_check, ManureID, Day)
n_col_df <- wong_subset %>%
group_by(Taxon) %>%
summarise(n = n())
n_col_df <- as.data.frame(n_col_df)
n_col <- length(n_col_df[,1])
col_vector2 <- distinctColorPalette(k = n_col, altCol = FALSE, runTsne = FALSE)
n_col_df$color_col <- col_vector2
for(i in 1:length(wong_subset[,1])){
for(j in 1:n_col){
if(wong_subset$Taxon[i] == n_col_df$Taxon[j]){
wong_subset$color_column[i] <- n_col_df$color_col[j]
}else{
}
}
}
wong_subset$Day <- as.numeric(wong_subset$Day)
collection_days <- sort(unique(wong_subset$Day))
no_collection_days <- length(collection_days)
for(i in 1:no_collection_days){
test_time <- collection_days[i]
#print(test_time)
wong_subset$time_rank[wong_subset$Day == test_time] <- i
}
wong_subset$time_rank <- as.numeric(wong_subset$time_rank)
### Temporary fix to the double value for the 15 day measurement in sample 16S:
### Need to check with Melvin to see whether this is a reasonable assumption to make.
wong_subset$Prop[wong_subset$ManureID == '16S' & wong_subset$Day == '15'] <- wong_subset$Prop/2
plot_title <- paste0("Bacterial taxa (16S rRNA) in cattle feces through time; taxonomic level - ", taxon_level_of_interest)
taxon_plot <- ggplot(data = wong_subset, aes(x = time_rank, y = stat(wong_subset$Prop), fill = Taxon)) +
geom_bar(stat = 'identity') +
geom_col(width = 1) +
#ggtitle(plot_title) +
xlab("Day") +
#scale_x_continuous(labels=c(rep(c("0", "2", "4", "6", "8", "15", "22", "29", "43", "57"), 12))) +
#scale_x_discrete() +
ylab("Percentage of 16S per bacterial phylum") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1)) +
facet_grid(~ManureID, scales = 'free') +
scale_fill_manual(values = col_vector2, name = paste0("Taxonomic level: ", str_to_title(taxon_level_of_interest))) +
scale_x_discrete(limits=c("0", "2", "4", "6", "8", "15", "22", "29", "43", "57")) +
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0, vjust = 0.5))
plot(taxon_plot)
plot(taxon_plot)
ggsave(paste0(base_dir,"figures/wong_results_", taxon_level_of_interest, ".png"), width = 16, height = 8, units = 'in')
#Test showing there is a duplication of the values in sample 16S, day 15
no <- wong_subset %>%
group_by(ManureID, Day) %>%
summarise(total = sum(Prop))
taxon_plot <- ggplot(data = wong_subset, aes(x = time_rank, y = stat(wong_subset$Prop), fill = Taxon)) +
geom_bar(stat = 'identity') +
geom_col(width = 1) +
#ggtitle(plot_title) +
xlab("Day") +
#scale_x_continuous(labels=c(rep(c("0", "2", "4", "6", "8", "15", "22", "29", "43", "57"), 12))) +
#scale_x_discrete() +
ylab("Percentage of 16S per bacterial phylum") +
theme_classic() +
theme(plot.title = element_text(hjust = 0.5)) +
theme(axis.text.x = element_text(size = 10, angle = 45, hjust = 1)) +
facet_grid(~ManureID, scales = 'free') +
scale_fill_manual(values = col_vector2, name = paste0("Taxonomic level: ", str_to_title(taxon_level_of_interest))) +
scale_x_discrete(limits=c("0", "2", "4", "6", "8", "15", "22", "29", "43", "57")) +
theme(axis.text.x = element_text(size = 8, angle = 90, hjust = 0, vjust = 0.5))
plot(taxon_plot)
ggsave(paste0(base_dir,"figures/wong_results_", taxon_level_of_interest, ".png"), width = 16, height = 8, units = 'in')
plot(taxon_plot)
base_dir
